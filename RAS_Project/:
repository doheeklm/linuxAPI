/* RAS_Oammmc.c */
#include "RAS_Inc.h"

extern Env_t g_tEnv;

int OAMMMC_Init( mpipc_t *ptMpipc, oammmc_t *ptOammmc )
{
	//CHECK_PARAM_RC( ptMpipc );

	if ( NULL == ptMpipc )
	{
		LOG_ERR_F( "ptMpipc NULL" );
		return RAS_rErrInvalidParam;
	}

	int nRC = 0;

	ptOammmc = oammmc_init( PROCESS_NAME );
	if ( NULL == ptOammmc )
	{
		LOG_ERR_F( "oammmc_init fail" );
		return RAS_rErrFail;
	}

	/*
	 *	Bind MMT Channel
	 */
	if ( 1 == g_tEnv.nMmtEnable )
	{
		nRC = oammmc_bind_mmt( ptOammmc, PROCESS_NAME, g_tEnv.nMmtPort, g_tEnv.nMmtConnMax, g_tEnv.nMmtLocalOnly, g_tEnv.nMmtIsQuiet );
		if ( 0 > nRC )
		{
			LOG_ERR_F( "oammmc_bind_mmt fail <%d>", nRC );
			goto _exit_failure;
		}

		LOG_DBG_F( "mmt_enabled" );
	}

	/*
	 *	Bind MML Channel
	 */	
	if ( 1 == g_tEnv.nMmlEnable )
	{
		nRC = oammmc_bind_mml( ptOammmc, mpipc_tap_ipc(ptMpipc), oammmc_name(ptOammmc) );
		if ( 0 > nRC )
		{
			LOG_ERR_F( "oammmc_bind_mml fail <%d>", nRC );
			goto _exit_failure;
		}

		LOG_DBG_F( "mml_enabled" );
	}

	if ( 0 == g_tEnv.nMmtEnable && 0 == g_tEnv.nMmlEnable )
	{
		LOG_ERR_F( "all oammmc channels are disabled" );
		goto _exit_failure;
	}

	/*
	 *	Register Command
	 */
	nRC = MMCHDL_CLIIP_Init( ptOammmc );
	if ( RAS_rOK != nRC )
	{
		LOG_ERR_F( "MMCHDL_CLIIP_Init fail <%d>", nRC );
		goto _exit_failure;
	}

	nRC = MMCHDL_CLIIPTRC_Init( ptOammmc );
	if ( RAS_rOK != nRC )
	{
		LOG_ERR_F( "MMCHDL_CLIIPTRC_Init fail <%d>", nRC );
		goto _exit_failure;
	}

	nRC = MMCHDL_USRINFO_Init( ptOammmc );
	if ( RAS_rOK != nRC )
	{
		LOG_ERR_F( "MMCHDL_USRINFO_Init fail <%d>", nRC );
		goto _exit_failure;
	}

	nRC = mpipc_regi_hdlr( ptMpipc, oammmc_mpipc_hdlr, ptOammmc );
	if ( 0 > nRC )
	{
		LOG_ERR_F( "mpipc_regi_hdlr fail <%d>", nRC );
		goto _exit_failure;
	}

	nRC = oammmc_start( ptOammmc );
	if ( 0 > nRC )
	{
		LOG_ERR_F( "oammmc_start fail <%d>", nRC );
		goto _exit_failure;
	}

	OAMMMC_Destroy( ptOammmc );
	return RAS_rOK;

_exit_failure:
	OAMMMC_Destroy( ptOammmc );
	return RAS_rErrFail;
}

void OAMMMC_Destroy( oammmc_t *ptOammmc )
{
	int nRC = 0;
	
	if ( NULL != ptOammmc )
	{
		nRC = oammmc_stop( ptOammmc );
		if ( 0 > nRC )
		{
			LOG_ERR_F( "oammmc_stop fail <%d>", nRC );
		}
		LOG_DBG_F( "oammmc_stop" );
		oammmc_destroy( ptOammmc );
		LOG_DBG_F( "oammmc_destroy" );
	}

	return;
}
